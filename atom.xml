<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Playboy</title>
  <subtitle>To  Be  a  Better  Me</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-16T00:57:13.721Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>qinghualiu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/08/16/hexo%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E5%88%B0%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    <id>http://yoursite.com/2017/08/16/hexo入门学习-文章图片存储到七牛云/</id>
    <published>2017-08-15T17:50:57.961Z</published>
    <updated>2017-08-16T00:57:13.721Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: &apos;hexo入门学习:  hexo文章中插入图片(一)&apos;</div><div class="line">date: 2017-08-16 01:50:57</div><div class="line">tags: hexo</div><div class="line">categories: hexo</div></pre></td></tr></table></figure>
<p>在hexo文章中插入图片有两种方式：</p>
<ul>
<li><p>使用本地路径：将图片上传到本地</p>
</li>
<li><p>将图片托管到七牛云</p>
<p>​</p>
</li>
</ul>
<p>下面介绍第二种方式</p>
<p><img src="http://ouqmoaex1.bkt.clouddn.com/myVideo.jpg" alt="文章图片存储到七牛云"></p>
<a id="more"></a>
<h3 id="一-注册七牛云账号"><a href="#一-注册七牛云账号" class="headerlink" title="一. 注册七牛云账号"></a>一. 注册七牛云账号</h3><p>登录   <a href="https://www.qiniu.com/" target="_blank" rel="external">七牛云网站</a>，注册一个自己的账号即可。</p>
<h3 id="二-创建存储空间"><a href="#二-创建存储空间" class="headerlink" title="二. 创建存储空间"></a>二. 创建存储空间</h3><ul>
<li>1.点击立即添加</li>
</ul>
<p><img src="http://ouqmoaex1.bkt.clouddn.com/step1.png" alt="文章图片存储到七牛云"></p>
<ul>
<li>2.填写空间名称、选择存储区域和访问控制</li>
</ul>
<p><img src="http://ouqmoaex1.bkt.clouddn.com/step2.png" alt="文章图片存储到七牛云"></p>
<ul>
<li>3.选择照片</li>
</ul>
<p><img src="http://ouqmoaex1.bkt.clouddn.com/step4.png" alt="文章图片存储到七牛云"></p>
<h3 id="三-引用照片链接"><a href="#三-引用照片链接" class="headerlink" title="三. 引用照片链接"></a>三. 引用照片链接</h3><p><img src="http://ouqmoaex1.bkt.clouddn.com/step5.png" alt="文章图片存储到七牛云"></p>
<h3 id="四-使用"><a href="#四-使用" class="headerlink" title="四. 使用"></a>四. 使用</h3><p>粘贴到你想使用的地方，当然也可以使用浏览器直接打开，主要是在hexo中使用，在Markdown中采用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![图片加载失败时的替换文字](刚刚复制的图片链接)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;title: &amp;apos;hexo入门学习:  hexo文章中插入图片(一)&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;date: 2017-08-16 01:50:57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tags: hexo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;categories: hexo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在hexo文章中插入图片有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用本地路径：将图片上传到本地&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将图片托管到七牛云&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面介绍第二种方式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ouqmoaex1.bkt.clouddn.com/myVideo.jpg&quot; alt=&quot;文章图片存储到七牛云&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>new一个</title>
    <link href="http://yoursite.com/2017/08/15/new%E4%B8%80%E4%B8%AA/"/>
    <id>http://yoursite.com/2017/08/15/new一个/</id>
    <published>2017-08-15T12:20:41.000Z</published>
    <updated>2017-08-15T12:20:41.201Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在博客文章中插入图片</title>
    <link href="http://yoursite.com/2017/08/15/%E5%9C%A8%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2017/08/15/在博客文章中插入图片/</id>
    <published>2017-08-14T17:40:36.000Z</published>
    <updated>2017-08-15T17:44:54.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><ul>
<li><a href="https://git-scm.com" target="_blank" rel="external">官网</a></li>
<li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">文档</a></li>
</ul>
<h3 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h3><ul>
<li>Git是一款免费、开源的分布式 <code>版本控制软件</code> VCS - Version Control System</li>
<li>由 Linus Torvalds（林纳斯·托瓦兹）于2005年发布。</li>
<li>最初目的是为更好地管理 Linux内核 开发而设计</li>
<li>Git使用方式：1 命令 、2 图形化界面（GUI）</li>
</ul>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git简介&quot;&gt;&lt;a href=&quot;#Git简介&quot; class=&quot;headerlink&quot; title=&quot;Git简介&quot;&gt;&lt;/a&gt;Git简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;什么是Git&quot;&gt;&lt;a href=&quot;#什么是Git&quot; class=&quot;headerlink&quot; title=&quot;什么是Git&quot;&gt;&lt;/a&gt;什么是Git&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Git是一款免费、开源的分布式 &lt;code&gt;版本控制软件&lt;/code&gt; VCS - Version Control System&lt;/li&gt;
&lt;li&gt;由 Linus Torvalds（林纳斯·托瓦兹）于2005年发布。&lt;/li&gt;
&lt;li&gt;最初目的是为更好地管理 Linux内核 开发而设计&lt;/li&gt;
&lt;li&gt;Git使用方式：1 命令 、2 图形化界面（GUI）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git的基本使用(二)</title>
    <link href="http://yoursite.com/2017/08/10/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8(%E4%BA%8C)/"/>
    <id>http://yoursite.com/2017/08/10/git的基本使用(二)/</id>
    <published>2017-08-09T18:21:44.000Z</published>
    <updated>2017-08-15T17:45:49.794Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouqmoaex1.bkt.clouddn.com/hexo-css-4.jpg" alt="加载失败吗？？？"></p>
<h1 id="Git-版本控制工具"><a href="#Git-版本控制工具" class="headerlink" title="Git -版本控制工具"></a>Git -版本控制工具</h1><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ul>
<li><p>查看分支：<code>git branch</code>，当前分支会标有一个<code>*</code></p>
</li>
<li><p>创建分支：<code>git branch [分支名称]</code></p>
<ul>
<li>分支中的代码，与创建那一刻主分支中的内容完全相同</li>
</ul>
</li>
<li><p>切换分支：<code>git checkout [分支名称]</code></p>
</li>
<li><p>(简写)创建并切换分支：<code>git checkout -b [分支名称]</code></p>
</li>
<li><p>合并分支：<code>git merge [分支名称]</code>，即：将其他分支合并到当前分支</p>
</li>
<li><p>删除分支：<code>git branch -d [分支名称]</code></p>
</li>
</ul>
<a id="more"></a>
<h3 id="合并分支冲突"><a href="#合并分支冲突" class="headerlink" title="合并分支冲突"></a>合并分支冲突</h3><ul>
<li>注意：合并分支时出现冲突只能手动处理文件，然后，再次提交</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">如果在一个从分支中做了修改，然后，在主分支中也做了修改。</div><div class="line">此时，将这个从分支合并到主分支的时候，就会出现合并冲突的问题！</div><div class="line"></div><div class="line"></div><div class="line">在两个分支中同时修改了一个文件中的内容，此时，就会造成合并分支冲突</div><div class="line">，如果发生了合并冲突，需要我们手动解决！</div><div class="line"></div><div class="line">1 决定保留哪个分支中的内容</div><div class="line">2 重新提交</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">操作：将 hotfix 分支，合并到cart分支中</div><div class="line"></div><div class="line">HEAD：表示当前分支</div><div class="line">hotfix： 表示被合并分支</div><div class="line"></div><div class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class="line">        &lt;span&gt;第三次修改的内容&lt;/span&gt;</div><div class="line"></div><div class="line">        &lt;cart&gt;这是在 cart 分支中提交的内容&lt;/cart&gt;</div><div class="line">=======</div><div class="line">        &lt;span&gt;第三次修改的内容 --- hotfix 修改bug&lt;/span&gt;</div><div class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; hotfix</div></pre></td></tr></table></figure>
<h3 id="分支的说明"><a href="#分支的说明" class="headerlink" title="分支的说明"></a>分支的说明</h3><ul>
<li>1 公司开发的项目都是由多个分支组成：主分支 + dev分支</li>
<li>2 项目经理新建项目仓库，所有的程序员都从这个仓库中获取代码，完成开发任务</li>
<li>3 项目经理：搭建设计仓库，创建master分支，以及dev分支（以及 debug分支等）</li>
<li>4 所有的程序员在 dev分支 上进行开发，并且还有自己维护的分支</li>
<li>5 程序员在分支上完成开发任务后，会提交合并请求</li>
<li>6 项目经理安排测试，如果没有问题了，最后才会与 master 分支合并</li>
</ul>
<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><ul>
<li><a href="https://github.com/" target="_blank" rel="external">github官网</a></li>
<li><a href="https://git.oschina.net/" target="_blank" rel="external">开源中国-Git</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">在 GitHub 上免费托管的 Git 仓库，</div><div class="line">任何人都可以看到喔（但只有你自己才能改）。</div><div class="line">所以，不要把敏感信息放进去。</div></pre></td></tr></table></figure>
<h3 id="github与git"><a href="#github与git" class="headerlink" title="github与git"></a>github与git</h3><ul>
<li>1 git 是一个版本控制工具</li>
<li>2 github就是一个网站，这个网站提供了 git 服务器的功能</li>
</ul>
<h3 id="将代码提交到远程仓库（HTTPS）"><a href="#将代码提交到远程仓库（HTTPS）" class="headerlink" title="将代码提交到远程仓库（HTTPS）"></a>将代码提交到远程仓库（HTTPS）</h3><ul>
<li>1 在本地创建仓库<ul>
<li><code>git init</code></li>
<li><code>git config</code></li>
</ul>
</li>
<li>2 新建 README.md 文件，并输入任意内容</li>
<li>3 将 README.md 提交到本地<ul>
<li><code>git add</code></li>
<li><code>git commit</code></li>
</ul>
</li>
<li>4 在github中新建仓库，并拿到仓库地址</li>
<li>5 使用命令 <code>git push [仓库地址] master</code> 提交内容到github的默认分支</li>
<li>6 刷新github仓库页面，在线修改 README.md 文件，并提交</li>
<li>7 使用命令 <code>git pull [仓库地址] master</code> 获取仓库中的最新内容</li>
</ul>
<h3 id="获取远程仓库内容"><a href="#获取远程仓库内容" class="headerlink" title="获取远程仓库内容"></a>获取远程仓库内容</h3><ul>
<li><p>命令：<code>git pull [仓库地址] [分支名称]</code> 获取远程仓库最新内容</p>
</li>
<li><p>命令：<code>git clone [仓库地址] [自定义本地仓库名]</code> 将整个仓库克隆到本地</p>
<ul>
<li>实例：<code>git clone git://github.com/jquery/jquery.git myJQ</code></li>
</ul>
</li>
</ul>
<h3 id="简化操作"><a href="#简化操作" class="headerlink" title="简化操作"></a>简化操作</h3><ul>
<li>1 <code>git remote add origin [仓库地址]</code><ul>
<li>作用：使用origin代替 仓库地址 ，方便操作</li>
<li>origin就相当于js的变量，[仓库地址]就相当于变量的值</li>
</ul>
</li>
<li>2 <code>git push -u origin master</code><ul>
<li>作用：<code>-u</code>参数将origin与master连在一起</li>
</ul>
</li>
<li>3 使用简化命令 <code>git push origin</code> 就代替原来：”git remote add origin [仓库地址]”</li>
</ul>
<h3 id="SSH介绍"><a href="#SSH介绍" class="headerlink" title="SSH介绍"></a>SSH介绍</h3><ul>
<li>非对称加密、公钥和私钥</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">GitHub 需要识别出你推送的提交确实是你推送的，而不是别人冒充的，</div><div class="line">而 Git 支持 SSH 协议，所以，GitHub 只要知道了你的公钥，</div><div class="line">就可以确认只有你自己才能推送，从而省去每次输入密码的操作。</div><div class="line"></div><div class="line">可以同时设置多个SSH key，比如：你可以在公司电脑提交需要一个key，</div><div class="line">回家后自己的电脑提交也需要一个key</div><div class="line"></div><div class="line">ssh是一种安全的传输模式</div><div class="line">github要求推送代码的用户是合法的，所以每次推送时候都要输入账号密码，</div><div class="line">用以验证你是否为合法用户，为了省去每次都要输入密码的步骤，采用shh公钥，密钥</div><div class="line">也就是你说的sshkey来验证你是否为合法用户</div><div class="line">在你的电脑生成了一个唯一的ssh公钥和私钥，公钥放到github上面，当你推送的时候，git就会</div><div class="line">匹配你的私钥是否跟github上面的公钥是配对的，正确就认为你是合法的，允许推送。</div><div class="line"></div><div class="line">sshkey可以理解为是你的身份标识，放在github上面表明你是这个项目的一个开发人员，但是别</div><div class="line">人是可以截获的，你本机的私钥别人就无法截获，sshkey就可以保证每次传输都是安全的。</div></pre></td></tr></table></figure>
<h3 id="将代码提交到远程仓库（SSH）"><a href="#将代码提交到远程仓库（SSH）" class="headerlink" title="将代码提交到远程仓库（SSH）"></a>将代码提交到远程仓库（SSH）</h3><ul>
<li>1 创建SSH Key：<code>ssh-keygen -t rsa</code></li>
<li>2 在文件路径 <code>C:\用户\当前用户名\</code> 找到 <code>.ssh</code> 文件夹</li>
<li>3 文件夹中有两个文件：<ul>
<li>私钥：<code>id_rsa</code></li>
<li>公钥：<code>id_rsa.pub</code></li>
</ul>
</li>
<li>4 在 <code>github -&gt; settings -&gt; SSH and GPG keys</code>页面中，新创建SSH key</li>
<li>5 粘贴 公钥 <code>id_rsa.pub</code> 内容到对应文本框中</li>
<li>5 在github中新建仓库或者使用现在仓库，拿到<code>git@github.com:用户名/仓库名.git</code></li>
<li>6 此后，再次SSH方式与github“通信”，不用输入密码确认身份了</li>
</ul>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul>
<li><p>先获取再提交，即：先<code>pull</code>再<code>push</code></p>
</li>
<li><p>获取跟新的其他方式：<code>fetch</code> </p>
</li>
<li><a href="http://ruby-china.org/topics/4768" target="_blank" rel="external">pull和fetch的区别</a></li>
</ul>
<h2 id="github搭建博客"><a href="#github搭建博客" class="headerlink" title="github搭建博客"></a>github搭建博客</h2><ul>
<li>使用github服务器的 <code>gh-pages</code> 分支</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1 在本地工作目录使用git初始化 `git init`</div><div class="line">2 创建自己的博客项目</div><div class="line">3 将创建好的博客添加到暂存区 `git add [文件路径]`</div><div class="line">4 本地提交： `git commit -m &quot;第一个博客&quot;`</div><div class="line">5 创建分支：`git branch gh-pages` 分支名称固定！</div><div class="line">6 切换分支：`git checkout gh-pages`</div><div class="line">7 提交到github：`git push [github仓库地址] gh-pages`</div><div class="line">8 查看github中对应的仓库中，是不是提交到了 &quot;gh-pages&quot; 分支</div><div class="line">9 访问：&lt;github用户名&gt;.github.io/&lt;仓库名&gt;/&lt;文件名&gt;</div><div class="line"></div><div class="line">10 默认会访问 index.html</div></pre></td></tr></table></figure>
<ul>
<li>动态页面：.jsp / .php / .asp / .aspx</li>
</ul>
<h2 id="Git软件（GUI-图形化界面）"><a href="#Git软件（GUI-图形化界面）" class="headerlink" title="Git软件（GUI 图形化界面）"></a>Git软件（GUI 图形化界面）</h2><ul>
<li>SourceTree / TortoiseGit</li>
<li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="external">TortoiseGit使用教程</a></li>
</ul>
<h2 id="Git-其他操作"><a href="#Git-其他操作" class="headerlink" title="Git -其他操作"></a>Git -其他操作</h2><h3 id="文件对比"><a href="#文件对比" class="headerlink" title="文件对比"></a>文件对比</h3><ul>
<li>命令：<code>git diff</code>：将工作区与暂存区或者仓库对比</li>
<li><p>说明：如果暂存区没有文件，就会将工作区代码与上一次提交对比</p>
<ul>
<li>1 工作区 与 暂存区对比</li>
<li>2 工作区 与 仓库  对比</li>
</ul>
</li>
<li><p>命令：<code>git diff --cached</code>：将当前暂存区与仓库对比</p>
</li>
<li>命令：<code>git diff [版本号1] [版本号2] [对比的文件路径]</code><ul>
<li>对比仓库区两次提交的差异</li>
</ul>
</li>
</ul>
<h3 id="撤销和删除"><a href="#撤销和删除" class="headerlink" title="撤销和删除"></a>撤销和删除</h3><ul>
<li><code>git reset HEAD 文件名</code> 从暂存区撤销（结果：变为 未 add 状态）</li>
<li><code>git checkout -- test.txt</code> 撤销文件变化<ul>
<li>一种是 readme.txt 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</li>
<li>一种是 readme.txt 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</li>
</ul>
</li>
<li><code>rm [文件名称]</code>：删除文件（物理删除）</li>
<li><code>git rm [文件名称]</code>：从仓库中删除文件</li>
<li><code>git rm --cached [文件名称]</code>：从暂存区删除文件</li>
</ul>
<h3 id="结构说明"><a href="#结构说明" class="headerlink" title="结构说明"></a>结构说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hooks：  存储钩子的文件夹</div><div class="line">logs：   存储日志的文件夹</div><div class="line">refs：   存储指向各个分支的指针（SHA-1标识）文件</div><div class="line">objects：存放git对象</div><div class="line">config： 存放各种设置文档</div><div class="line">HEAD：   指向当前所在分支的指针文件路径，一般指向refs下的某文件</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouqmoaex1.bkt.clouddn.com/hexo-css-4.jpg&quot; alt=&quot;加载失败吗？？？&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Git-版本控制工具&quot;&gt;&lt;a href=&quot;#Git-版本控制工具&quot; class=&quot;headerlink&quot; title=&quot;Git -版本控制工具&quot;&gt;&lt;/a&gt;Git -版本控制工具&lt;/h1&gt;&lt;h2 id=&quot;分支&quot;&gt;&lt;a href=&quot;#分支&quot; class=&quot;headerlink&quot; title=&quot;分支&quot;&gt;&lt;/a&gt;分支&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看分支：&lt;code&gt;git branch&lt;/code&gt;，当前分支会标有一个&lt;code&gt;*&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建分支：&lt;code&gt;git branch [分支名称]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分支中的代码，与创建那一刻主分支中的内容完全相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;切换分支：&lt;code&gt;git checkout [分支名称]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(简写)创建并切换分支：&lt;code&gt;git checkout -b [分支名称]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;合并分支：&lt;code&gt;git merge [分支名称]&lt;/code&gt;，即：将其他分支合并到当前分支&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除分支：&lt;code&gt;git branch -d [分支名称]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端工具" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>git的基本使用(一)</title>
    <link href="http://yoursite.com/2017/08/10/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8(%E4%B8%80)/"/>
    <id>http://yoursite.com/2017/08/10/git的基本使用(一)/</id>
    <published>2017-08-09T18:18:20.000Z</published>
    <updated>2017-08-14T17:43:06.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><ul>
<li><a href="https://git-scm.com" target="_blank" rel="external">官网</a></li>
<li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">文档</a></li>
</ul>
<h3 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h3><ul>
<li>Git是一款免费、开源的分布式 <code>版本控制软件</code> VCS - Version Control System</li>
<li>由 Linus Torvalds（林纳斯·托瓦兹）于2005年发布。</li>
<li>最初目的是为更好地管理 Linux内核 开发而设计</li>
<li>Git使用方式：1 命令 、2 图形化界面（GUI）</li>
</ul>
<a id="more"></a>
<h3 id="Git的优势"><a href="#Git的优势" class="headerlink" title="Git的优势"></a>Git的优势</h3><ul>
<li>Git的速度快，性能好</li>
<li>有效、高速的处理从很小到非常大的项目版本管理</li>
<li>采用分布式存储方式，不需要服务器就可以运行</li>
<li>使得源代码的发布和交流极其方便</li>
</ul>
<h2 id="两种版本控制工具"><a href="#两种版本控制工具" class="headerlink" title="两种版本控制工具"></a>两种版本控制工具</h2><ul>
<li>集中式版本控制工具: SVN</li>
<li>分布式版本控制工具: Git</li>
</ul>
<h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">版本控制是一种记录一个或若干文件内容变化，以便将来查阅特</div><div class="line">定版本修订情况的系统。</div></pre></td></tr></table></figure>
<h3 id="集中式和分布式的区别"><a href="#集中式和分布式的区别" class="headerlink" title="集中式和分布式的区别"></a>集中式和分布式的区别</h3><ul>
<li>1 集中式依赖于远程服务器，在没有网络的情况下无法提交</li>
<li>2 所有开发者都共享一个远程服务器</li>
<li>3 分布式直接进行本地存储，不依赖与远程服务器（可有可无）</li>
<li>4 没有网络的情况下，也可以工作，有网了，将本地修改内容全部提交到远程服务器</li>
</ul>
<h2 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h2><h2 id="Git的基本使用"><a href="#Git的基本使用" class="headerlink" title="Git的基本使用"></a>Git的基本使用</h2><ul>
<li>查看帮助：<code>git --help</code></li>
<li>查看某一命令帮助：<code>git add -h</code></li>
</ul>
<h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><ul>
<li>需要配置：user.name 和 user.email</li>
<li>作用：每次 Git 提交时都会引用这两条信息，记录是谁提交了更新</li>
<li>配置用户名：   <code>git config --global user.name &quot;用户名&quot;</code></li>
<li>配置邮箱：     <code>git config --global user.email &quot;邮箱地址&quot;</code></li>
<li>查看配置信息： <code>git config --list</code></li>
<li>使用 <code>--global</code> 实现全局配置，任何位置使用git都有效</li>
</ul>
<h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><ul>
<li>命令：<code>git init</code></li>
<li>作用：使用Git管理项目的初始化操作，会创建一个名为<code>.git</code>的隐藏目录</li>
<li>一般是在项目的根目录执行这个命令</li>
<li><code>.git</code>目录:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">它是 Git 用来保存元数据和对象数据库的地方。</div><div class="line">该目录非常重要，每次克隆镜像仓库的时候，实际拷贝的就是这个目录里面的数据。</div></pre></td></tr></table></figure>
<h3 id="跟踪文件"><a href="#跟踪文件" class="headerlink" title="跟踪文件"></a>跟踪文件</h3><ul>
<li>作用：将文件由 工作区 添加到 暂存区（Index），暂存文件</li>
<li>命令：<code>git add 文件路径</code><ul>
<li>例如： <code>git add ./README.md</code></li>
</ul>
</li>
<li><code>git add --all</code> 或者 <code>git add -A</code>（简写） 添加所有文件</li>
<li><code>git add a.txt b.txt</code> 同时添加两个文件</li>
<li><code>git add *.js</code> 添加当前目录下的所有js文件</li>
</ul>
<h3 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h3><ul>
<li>作用：将文件由 暂存区 添加到 仓库（HEAD）</li>
<li><code>git commit -m &quot;提交说明&quot;</code></li>
</ul>
<h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3><ul>
<li>命令：<code>git status</code></li>
<li>命令：<code>git stauts -s</code> 简化日志输出格式</li>
</ul>
<h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><ul>
<li>三个存储分区的说明：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 工作区：开发者的工作目录</div><div class="line">2 暂存区：临时存放工作目录中变更的文件</div><div class="line">3 仓库  ：存储提交之后的文件目录</div></pre></td></tr></table></figure>
<ul>
<li>文件的三种状态：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">已修改（modified）=&gt; 已暂存（staged）=&gt; 已提交（committed）</div><div class="line"></div><div class="line">已修改表示修改了某个文件，但还没有提交保存</div><div class="line">已暂存表示把已修改的文件放在下次提交时要保存的清单中</div><div class="line">已提交表示该文件已经被安全地保存在本地git仓库中了</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 在工作目录中修改某些文件。</div><div class="line">2 对修改后的文件进行快照，然后保存到暂存区域。</div><div class="line">3 提交更新，将保存在暂存区域的文件快照永久转储到.git目录中。</div></pre></td></tr></table></figure>
<h3 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h3><ul>
<li>命令：<code>git log</code> 查看详细的提交信息</li>
<li>命令：<code>git log --oneline</code> 简洁的日志信息</li>
<li>命令：<code>git reflog</code> 查看所有提交变更操作</li>
</ul>
<h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><ul>
<li>作用：恢复到已经提交的某一个版本中</li>
<li><p>命令：<code>git reset --hard [版本号]</code></p>
<ul>
<li>作用：回退到指定的版本号</li>
</ul>
</li>
<li><p>其他方式：<code>git reset --hard head~1</code></p>
<ul>
<li>~1 表示回到上一次提交</li>
<li>~2 表示上上一次提交</li>
<li>~0 表示当前提交</li>
</ul>
</li>
</ul>
<h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><ul>
<li>作用：忽略一些不需要被git管理的文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1 在与 .git 隐藏目录同级的目录中创建 `.gitignore` 文件</div><div class="line">2 打开 .gitignore 文件，加入忽略文件，例如：/test.html</div><div class="line">3 路径是相对于当前 .gitignore文件 的路径</div><div class="line"></div><div class="line">路径写法：</div><div class="line">/css/a.css</div><div class="line">/css/*.css</div><div class="line">/a.html</div><div class="line"></div><div class="line">#忽略 build/ 目录下的所有文件</div><div class="line">build/</div></pre></td></tr></table></figure>
<h4 id="忽略文件的说明"><a href="#忽略文件的说明" class="headerlink" title="忽略文件的说明"></a>忽略文件的说明</h4><ul>
<li>1 使用 <code>#</code> 表示注释，例如：<code># 这是注释内容</code></li>
<li>2 使用 <code>*</code> 表示通配符，匹配所有文件，例如：<code>/css/*.css</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git简介&quot;&gt;&lt;a href=&quot;#Git简介&quot; class=&quot;headerlink&quot; title=&quot;Git简介&quot;&gt;&lt;/a&gt;Git简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;什么是Git&quot;&gt;&lt;a href=&quot;#什么是Git&quot; class=&quot;headerlink&quot; title=&quot;什么是Git&quot;&gt;&lt;/a&gt;什么是Git&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Git是一款免费、开源的分布式 &lt;code&gt;版本控制软件&lt;/code&gt; VCS - Version Control System&lt;/li&gt;
&lt;li&gt;由 Linus Torvalds（林纳斯·托瓦兹）于2005年发布。&lt;/li&gt;
&lt;li&gt;最初目的是为更好地管理 Linux内核 开发而设计&lt;/li&gt;
&lt;li&gt;Git使用方式：1 命令 、2 图形化界面（GUI）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端工具" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>shell命令的使用</title>
    <link href="http://yoursite.com/2017/08/10/shell%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/08/10/shell命令的使用/</id>
    <published>2017-08-09T17:26:06.000Z</published>
    <updated>2017-08-10T08:53:46.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell-介绍"><a href="#Shell-介绍" class="headerlink" title="Shell 介绍"></a>Shell 介绍</h1><ul>
<li>Shell：壳（区别于：核）</li>
<li>普通意义上的shell就是可以接受用户输入命令的程序。它之所以被称作shell是因为它隐藏了操作系统低层的细节。</li>
<li>Bourne-Again shell（bash）：应用非常广泛的一种shell工具，是一个命令处理器，bash也是大多数Linux系统默认的Shell。</li>
</ul>
<a id="more"></a>
<h2 id="常用-shell-命令"><a href="#常用-shell-命令" class="headerlink" title="常用 shell 命令"></a>常用 shell 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># change directory 改变目录</span></div><div class="line"><span class="built_in">cd</span> 01-教学资料 <span class="comment"># 进入到 01-教学资料 文件夹</span></div><div class="line"><span class="comment"># cd .. 				 # 返回上一级目录</span></div><div class="line"></div><div class="line"><span class="comment"># list 展示当前目录列表</span></div><div class="line">ls</div><div class="line"><span class="comment"># ls -l 	# 以列表的形式展示目录</span></div><div class="line"><span class="comment"># ls -a 	# 展示全部目录</span></div><div class="line"><span class="comment"># ls -al 	# 相当于 ls -a -l</span></div><div class="line"><span class="comment"># ls -al 01-教学资料 	# 展示 01-教学资料 中所有的目录</span></div><div class="line"></div><div class="line"><span class="comment"># 打印当前目录</span></div><div class="line"><span class="comment"># print work directory</span></div><div class="line"><span class="built_in">pwd</span></div><div class="line"></div><div class="line"><span class="comment"># 清空当前窗口内容</span></div><div class="line">clear</div><div class="line"></div><div class="line"><span class="comment"># 创建文件夹</span></div><div class="line">mkdir 文件夹名称</div><div class="line"><span class="comment"># mkdir js css images # 同时创建多个文件夹</span></div><div class="line"></div><div class="line"><span class="comment"># 创建文件</span></div><div class="line">touch 文件名称</div><div class="line"><span class="comment"># touch css/index.css</span></div><div class="line"></div><div class="line"><span class="comment"># 查看文件全部内容</span></div><div class="line">cat 文件名称</div><div class="line"><span class="comment"># 按 q 键退出查看 </span></div><div class="line"></div><div class="line"><span class="comment"># 查看文件部分内容</span></div><div class="line">less 文件名称</div><div class="line"><span class="comment"># 内容太多，可以按 空格键 查看剩余内容</span></div><div class="line"><span class="comment"># 查看到最后，需要按 q键 退出查看</span></div><div class="line"></div><div class="line"><span class="comment"># 删除文件</span></div><div class="line">rm 文件名称</div><div class="line">rm -r css</div><div class="line"></div><div class="line"><span class="comment"># 删除空文件夹</span></div><div class="line">rmdir 文件夹名称</div><div class="line"></div><div class="line"><span class="comment"># 移动文件（相当于剪切）</span></div><div class="line">mv 文件名称 目标目录</div><div class="line"><span class="comment"># mv index.html css/pipixia.html # 移动的同时，修改文件名称</span></div><div class="line"><span class="comment"># mv index.html demo.html # 重命名</span></div><div class="line"></div><div class="line"><span class="comment"># 复制文件</span></div><div class="line">cp 文件名称 新文件名称</div><div class="line"><span class="comment"># cp index.html js/index1.html</span></div><div class="line"></div><div class="line"><span class="comment"># 自动补全 按：tab键</span></div><div class="line"><span class="comment"># 如果有多种情况，连按两次 tab键 会把所有的文件名称打印出来</span></div><div class="line"></div><div class="line"><span class="comment"># 重定向 将内容 Hello-World 添加到 test.txt 文件中</span></div><div class="line"><span class="built_in">echo</span> Hello-World &gt; test.txt</div><div class="line"><span class="comment"># ls &gt; test.txt 	# 覆盖，将ls命令的结果输出到 test.txt 文件中</span></div><div class="line"><span class="comment"># ls &gt;&gt; test.txt 	# 追加</span></div></pre></td></tr></table></figure>
<h1 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h1><ul>
<li>vi的3种模式 - 图例</li>
<li><img src="/2017/08/10/shell命令的使用/1-%E6%95%99%E5%AD%A6%E8%B5%84%E6%96%99/git-info/vi3model.png" alt="vi三种模式"></li>
</ul>
<h2 id="3种模式"><a href="#3种模式" class="headerlink" title="3种模式"></a>3种模式</h2><ul>
<li>1 命令模式</li>
<li>2 插入模式</li>
<li>3 底行模式</li>
<li>每种模式，能够执行的操作是不同的</li>
</ul>
<h2 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h2><ul>
<li>在命令模式下，输入<code>i</code>或<code>a</code>，就可以进行编辑了</li>
</ul>
<h2 id="底行模式"><a href="#底行模式" class="headerlink" title="底行模式"></a>底行模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用 vi</span></div><div class="line">vi 文件路径</div><div class="line"></div><div class="line"><span class="comment"># 保存</span></div><div class="line">:w </div><div class="line"><span class="comment"># :w filenme #另存为</span></div><div class="line"></div><div class="line"><span class="comment"># 退出</span></div><div class="line">:q</div><div class="line"></div><div class="line"><span class="comment"># 保存并退出</span></div><div class="line">:wq</div><div class="line"></div><div class="line"><span class="comment"># 撤销更改，返回到上一次保存的状态</span></div><div class="line">:e!</div><div class="line"></div><div class="line"><span class="comment"># 不保存强制退出</span></div><div class="line">:q!</div><div class="line"></div><div class="line"><span class="comment"># 展示行号</span></div><div class="line">:<span class="built_in">set</span> nu</div><div class="line"><span class="comment"># 删除行号 </span></div><div class="line">:<span class="built_in">set</span> nonu</div><div class="line">第一种是，手动显示：在vim命令行模式下输入  ：<span class="built_in">set</span> nu</div><div class="line"></div><div class="line">  取消显示：在vim命令行模式下输入：  <span class="built_in">set</span> nonu</div><div class="line"></div><div class="line">第二种是，永久自动显示：我们修改一个配置文件。</div><div class="line"></div><div class="line">我们输入命令：vim   ~/.vimrc</div><div class="line"></div><div class="line">打开后是一个空文件，我们添加 <span class="built_in">set</span> nu，保存退出，再次进入vim编辑器，就会自动显示出行号了。大笑如此简单</div></pre></td></tr></table></figure>
<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 保存并退出，大写</span></div><div class="line">ZZ</div><div class="line"></div><div class="line"><span class="comment"># 辙销操作，可多次使用</span></div><div class="line">u</div><div class="line"></div><div class="line"><span class="comment"># 删除当前行</span></div><div class="line">dd</div><div class="line"></div><div class="line"><span class="comment"># 复制当前行</span></div><div class="line">yy</div><div class="line"></div><div class="line"><span class="comment"># 粘贴内容</span></div><div class="line">p</div><div class="line"></div><div class="line"><span class="comment"># 向前翻页</span></div><div class="line">ctrl+b</div><div class="line"></div><div class="line"><span class="comment"># 向后翻页</span></div><div class="line">ctrl+f</div><div class="line"></div><div class="line"><span class="comment"># 进入编辑模式，</span></div><div class="line">i <span class="comment">#当前光标处插入</span></div><div class="line">a <span class="comment">#当前光标后插入</span></div><div class="line">A <span class="comment">#光标移动到行尾</span></div><div class="line">o <span class="comment">#当前行下面插入新行</span></div><div class="line">O <span class="comment">#当前行上面插入新行</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Shell-介绍&quot;&gt;&lt;a href=&quot;#Shell-介绍&quot; class=&quot;headerlink&quot; title=&quot;Shell 介绍&quot;&gt;&lt;/a&gt;Shell 介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Shell：壳（区别于：核）&lt;/li&gt;
&lt;li&gt;普通意义上的shell就是可以接受用户输入命令的程序。它之所以被称作shell是因为它隐藏了操作系统低层的细节。&lt;/li&gt;
&lt;li&gt;Bourne-Again shell（bash）：应用非常广泛的一种shell工具，是一个命令处理器，bash也是大多数Linux系统默认的Shell。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
</feed>
